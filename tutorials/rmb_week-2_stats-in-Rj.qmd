# Week 2 : Computing reproducible statistics using Rj {.unnumbered}

This week we will explore how to use Jamovi to compute and visualise descriptive statistics from a dataset. This will include some revision on Jamovi from last semester and an introduction on how we can use the R coding language to simplify complex data processing.

|     | Quantitative Methods              |
|-----|:----------------------------------|
|     | Measures of central tendency      |
|     | Measures of dispersion and spread |
|     | Measures of skew and normality    |

: Learning objectives for this session

|     | Data Skills                                            |
|-----|:-------------------------------------------------------|
|     | Working with the Rj editor to use R code within Jamovi |
|     | Learn the basics about functions and variables in R    |
|     | Computing descriptive statistics using R               |

|     | Open Science                                               |
|-----|:-----------------------------------------------------------|
|     | Validating and working with openly available research data |

## The Dataset {.unnumbered}

::: {.callout-note appearance="simple"}
# Dataset

Note that this is the same dataset as in week 1
:::

We will be exploring data that was collected as part of the ‘Many Labs 3’ project (Ebersole et al., 2016). This collected data from university students in the USA across a wide range of cognitive, behavioural and demographic measures. We will be exploring a subset of this dataset concerning individual differences in personality measures. The experimenters collected data to compute the ‘Big Five’ personality factors from each participant. Wikipedia describes the factors as:

-   Conscientiousness (efficient/organized vs. extravagant/careless)
-   Agreeableness (friendly/compassionate vs. critical/rational)
-   Neuroticism (sensitive/nervous vs. resilient/confident)
-   Openness to experience (inventive/curious vs. consistent/cautious)
-   Extraversion (outgoing/energetic vs. solitary/reserved)

This is a very simple (Gosling et al., 2003) and influential model that is used to summarise personality differences. Though it is popular, some researchers have criticised big five factors for conceptual and methodological reasons (Block, 1995). Read around and form your own view!

The data contains the average of two questions about each factor in which participants responded to questions using a scale from 1 to 7. A value of 1 indicates a low score and a value of 7 is a high score. For example, someone with an extraversion score of 2 is more introverted that someone with an extraversion score of 5.

## The Challenge {.unnumbered}

Last week, we looked at how we can spend some time understanding a new dataset and compute some descriptive statistics from it.

Now, we're going to learn how to use Jamovi and R to make this process more repeatable and more transparent. This will make it much easier for us to come back to the analysis and understand what steps were taken at a later date.

## Install the Rj Add-On in Jamovi {.unnumbered}

First, you should install the Rj Add-On using this [guide for installing Jamovi modules](https://docs.jamovi.org/_pages/Install_modules.html){.external target="_blank"}. Once installed you should have a new button on the Ribbon menu at the top of Jamovi...

![](../images/rmb-2025_week-1_computer-practical/RMB-2025_week-1_computer-practical_img2.png)

Click on this and select 'Rj Editor' to open a window in which we can write R code! Click on the small cog icon and make sure that 'Output' is set to 'Show code and output'.

![](../images/rmb-2025_week-1_computer-practical/RMB-2025_week-1_computer-practical_img3.png)

We can use the left-hand window, named Rj editor, to write commands, using the R language. These are the straightforward text commands that tell the computer a series of steps that we wanted to carry out. These commands can be edited and rerun as many times as we need, they can even be shared with collaborators and included as part of scientific publication.

This is a very powerful tool once we have a written set of instructions to work with rather than individually clicking through instructions. Though it takes a bit longer to write the commands, our analysis is much more transparent and reproducible once it is done.

The outputs of the analysis defined in the Rj editor appear on the right-hand side of the Jamovi window as usual. To check this out, let's explore using or as a calculator.

::: callout-tip
## Data Skills - R as a calculator

Try typing a set of sums or equations into the Rj editor. Include one sum on each line and include as many as you like. When you're ready, you can tell RJ to run the commands by clicking on the green triangle in the top right corner of the RJ editor. This will automatically compute. All of the sums you to find and print the results out in the right hand side window. see the example below.

You can use the following symbols to define your sums.

| Symbol | Operation |
|--------|-----------|
| \+     | Add       |
| \-     | Subtract  |
| \*     | Multiply  |
| /      | Divide    |

![](../images/rmb-2025_week-1_computer-practical/RMB-2025_week-1_computer-practical_img4.png)
:::

<!--# #############################################  -->

## Functions and Variables {.unnumbered}

Notice that the one of the equations in my example is a bit different to the others. The final example uses a function called sqrt as a shortcut to compute the square root of the number nine.

::: callout-note
## Definition of a function

Functions are used to perform specific, predefined tasks, such as calculations, data transformations, or visualization. You can think of it as a "black box" that takes in a value, performs some internal calculation, and returns the result.
:::

The `sqrt` function calculates the square root of a given number. In R code, this looks something like this:

``` r
sqrt(x)
```

with the 'x' replaced by any number. For example, we could compute the square root of 36 using the following command.

``` r
sqrt(36)
```

Add this line to your Rj editor and check the result..

Many functions, take inputs contained in parentheses written after the name of the function. These inputs are sometimes known as the arguments of a function. In the last example, 36 is an argument for the function sqrt.

Sometimes functions take several arguments, and the arguments themselves can have specific names. For example.

``` r
round(12.345, digits = 0)
```

will round the value `x` to a whole number with zero digits after the decimal point. Where as

``` r
round(12.345, digits = 2)
```

would round the same number to preserve 2 digits after the decimal point. Try running these examples in Rj with a range of different numbers to get a sense of how it works.

Often, we don't just want to see the result of some maths or a function call, we want to store the result to use again later. For this, we want to use variables. For example, here we store the result of a calculator sum in a variable named 'y'

``` r
y <- 2 + 2
```

If you run this in Rj, you'll notice that we no longer get the number 4 printed to the screen. This is as the output is now caught and stored rather than printed out. If we still want to see what is contained in `y`, we can use another helpful function named `print`.

``` r
y <- 2 + 2
print(y)
```

Will now also display the content of `y`.

::: callout-note
## Definition of a variable

A variable is an object that provides a labelled space to store information. The `<-` or `=` symbols indicate that we're assigning some information to a variable (the two symbols behave the same way, you could see either).

Crucially, the information on the right hand side is assigned to a variable with the name from the left hand side.
:::

A single analysis might have several lines of code that create, store and reuse a several different variables with several different functions. For example:

![](../images/rmb-2025_week-1_computer-practical/RMB-2025_week-1_computer-practical_img5.png)

<!--# #############################################  -->

:::: callout-tip
## Check Your Understanding

::: panel-tabset
## Question

What does this R code do? what is the value of `x`, `y` and `z`?

``` r
 x <- 10 + 10
 y <- sqrt(16)
 z <- x / y
```

## Hint

Try copying out and running the code in Rj.

You can add some `print` functions to see the value of the intermediate variables `x` and `y` as well. Try adding `print(x)` on the line immediately after x is defined.

Talk to your tutor if you're getting stuck.

## Solution

The final answers:

`x` is 20 and `y` is 4, so `z` = 20 / 4 which is 5.

![](../images/rmb-2025_week-1_computer-practical/RMB-2025_week-1_computer-practical_img6.png)
:::
::::

<!--# #############################################  -->

Rj has a special feature that the data loaded into our spreadsheet is always contained in a special variable named `data`. We can refer to this `data` variable to view and run analyses on our dataset.

## Compute Descriptive Statistics using R {.unnumbered}

Ok, back to statistics! How can we use our new R skills to compute statistics?

The trick is to understand that all the analyses in Jamovi are actually carried out by functions in R. Each analysis we can select from the top ribbon in Jamovi corresponds to a function that can be called in the code. Similarly, all of the options that we select in the analysis, dialogue boxes, correspond to arguments for that function. Let's take a look in practice.

To help understand this Jamovi provides an “R Syntax Mode”, in this mode, Jamovi produces equivalent R code for each analysis. To change to syntax mode, select the application menu (⋮) at the top right of Jamovi, and check the Syntax mode checkbox there.

::: {.callout-note appearance="simple"}
# Key step

Take a moment to load the data file into Jamovi.

With syntax mode on, compute the descriptive statistics for the big five personality factors again.
:::

The outputs should look like this:

![](../images/rmb-2025_week-1_computer-practical/RMB-2025_week-1_computer-practical_img7.png)

Notice that some R code has appeared at the top of the output table. This is relatively complex compared to our previous functions like `print` or `sqrt`. Let's break it down a bit.

::: callout-tip
## Data Skills - Understanding the descriptives function

This is the code that Jamovi's syntax mode will produce (with a little formatting to make the appearance simpler). Take a look through each part to understand what it does. Click the number in the annotation to highlight the corresponding part of the code.

``` r
jmv::descriptives(                                                                      # <1>
    data = data,                                                                        # <2>
    vars = vars(Openness, Conscientiousness, Extraversion, Agreeableness, Neuroticism)  # <3>
    )
```

1.  This is the name of the function that will do the computation for us. Everything contained within these parentheses are known as arguments, or inputs, for the function
2.  The first input is named `data` and is assigned to be the special data variable that contains the data loaded into our spreadsheet.
3.  The second input is a list of the data columns in our spreadsheet that we want to compute descriptives from.
:::

There is a lot of information here that might be hard to understand at first. Try changing the analysis options using the Jamovi buttons and watch what happens to the R syntax. In particular, try adding and removing different variables to the analysis.

::: {.callout-note appearance="simple"}
# Key step

Once you're ready, you can right click on this R syntax and click ‘Copy’ to copy it to your clipboard.

![](../images/rmb-2025_week-1_computer-practical/RMB-2025_week-1_computer-practical_img8.png)

and pasting it into an Rj window - now you can click run to reproduce your descriptive statistics table using the underlying R code.
:::

Great - well done on completing your first data analysis using R code! You should have the following output that will match the descriptives you've seen in the main Jamovi window.

![](../images/rmb-2025_week-1_computer-practical/RMB-2025_week-1_computer-practical_img9.png)

Head back over to the Jamovi descriptives tab and try updating your analysis. You could change the variables that you are computing the descriptive statistics from, add in some extra metrics (such as the Skewness or Shapiro-Wilk) or even generate a plot like a histogram.

Note that the R code in the syntax box of the output will stay up to date with your changes. Pay attention to how the function updates when you select different options.

<!--# #############################################  -->

:::: callout-tip
## Check Your Understanding

::: panel-tabset
## Question

What is the R code required to compute descriptive statistics from the Openness and Conscientiousness variables, whilst including the Skewness metric, the Shapiro-Wilk statistic and a histogram?

Can you run this analysis in Rj?

## Hint

Remember that the R code in the syntax mode will update as you define your analysis in Jamovi. Get the analysis right there and you can simply copy over the code.

Talk to your tutor if you're getting stuck.

## Solution

The final code should look like this

``` r
jmv::descriptives(
    data = data,
    vars = vars(Openness, Conscientiousness),
    hist = TRUE,
    skew = TRUE,
    sw = TRUE)
```
:::
::::

<!--# #############################################  -->

## Cleaning data using the `filter()` function {.unnumbered}

Remember that last week we very carefully removed several participants who had entered unrealisic or impossible ages into the datasets. This may have been an accident or mistake but either way we should not use this data.

R and Rj make it very easy to clean data without the boring, manual work we did last week. R can do the hard work and we can avoid scrolling through very large datasets by hand. Sounds good!

The first thing we can do is investigate what range of responses that people actually gave when asked about their age. To do this we can use a new function called `unique()`. This takes a column of a dataset as an input and returns a list of all the unique responses that it contains.

::: {.callout-note appearance="simple"}
# Key step

Load up an Rj Editor window (or continue in your old one) and run `unique()` on the age data.

We can access a single column of a dataset using the doller sign `$`. In this case `data$age` accesses the age column of the data sheet.
:::

The result should look like this:

![](../images/rmb-2025_week-2_computer-practical/RMB-2025_week-2_computer-practical_img1.png)

What do you think?

::: {.callout-tip collapse="true"}
## Data Skills - Evaluating the age column

Ok, most of these responses are fine but there are a lot of strange ones.

-   Firstly, we can find the extreme values that we saw last week (-2 and 149) - these are clearly mistakes (or some kind of weird prank).
-   Next, we can see a lot of people adding text (eg 'almost 19'). This is not helpful for the computer though it can be socially useful. The computer will read this in words and not numbers. These responses with additional text will count as missing data for any numerical analysis we do.
-   `<NA>` means that the data value is simply missing - perhaps these participants skipped the question.

We caught some of these issues last time but likely not all. It would be a huge effort to comb through the data line-by-line and identify all these issues.
:::

# Data Cleaning 1 - Converting

One solution to all this is to convert every value in the age column to a number and replace it with `<NA>`. We can then treat all these values the same rather than having many different types of response to worry about.

We can do this using another function: `as.numeric()`. Try the following:

![](../images/rmb-2025_week-2_computer-practical/RMB-2025_week-2_computer-practical_img2.png)

This code replaces the age column of the dataset with a new, converted one that only contains numerical values or `<NA>` for anything that cannot be converted to a number.

# Data Cleaning 2 - Filtering

Now that we have a clean data column we can use some filtering to remove the missing data and any extreme values.

# Reproducible data analysis

It probably seems like a small difference so far. After all, we same results for our analysis using the check, boxes in Jamovi or the code in R. The Jamovi analysis is certainly quicker to run for the first time and it's more convenient when exploring your data.

However the R code has several crucial advantages.

-   The R code is much more transparent about what is actually being run to generate the results and by sharing this code, we enable others to repeat our analysis. This makes it really straightforward to run and re-run identical analyses in situations where we need to be really sure that everybody has done the same thing. For example, if we want to be certain that two data sets have been analysed in an identical way then that our code would be the best way to do this.
-   R code is the best way to share what we've done with the rest of the world. It is common practice for modern academic public it to include the code that was used to generate the results in the paper. This way everybody who wants to check can make sure they fully understand what the authors of the paper have done.

Finally, over the course of the semester we'll see that R allows us to do much more than what is possible in Jamovi. We can define blocks of R code that can tidy-up and arrange our data, run multiple analyses and generate tables & figures all in one go. Much easier that clicking through all the menus each time we want to rerun an analysis!
